<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on win32)" generated="20210117 18:17:43.976" rpa="false">
<suite id="s1" name="Database" source="E:\Linguagens\Robot Framework\Libraries auxiliares\DatabaseLibrary\database.robot">
<test id="s1-t1" name="Exemplo 04: Limpando Tabelas">
<kw name="Conectar no Banco de Dados" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>dbapiModuleName=psycopg2</arg>
<arg>dbName=robot</arg>
<arg>dbUsername=postgres</arg>
<arg>dbPassword=postgres</arg>
<arg>dbHost=localhost</arg>
<arg>dbPort=5432</arg>
</arguments>
<msg timestamp="20210117 18:17:44.908" level="INFO">Connecting using : psycopg2.connect(database=robot, user=postgres, password=postgres, host=localhost, port=5432) </msg>
<status status="PASS" starttime="20210117 18:17:44.295" endtime="20210117 18:17:45.805"></status>
</kw>
<status status="PASS" starttime="20210117 18:17:44.295" endtime="20210117 18:17:45.806"></status>
</kw>
<kw name="Limpar Tabela">
<arguments>
<arg>account</arg>
</arguments>
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>selectStatement=SELECT * FROM ${TABELA}</arg>
</arguments>
<assign>
<var>${REGISTROS}</var>
</assign>
<msg timestamp="20210117 18:17:45.810" level="INFO">Executing : Row Count  |  SELECT * FROM account </msg>
<msg timestamp="20210117 18:17:45.817" level="INFO">${REGISTROS} = 2</msg>
<status status="PASS" starttime="20210117 18:17:45.808" endtime="20210117 18:17:45.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${REGISTROS} &gt; 0</arg>
<arg>Delete All Rows From Table</arg>
<arg>${TABELA}</arg>
</arguments>
<kw name="Delete All Rows From Table" library="DatabaseLibrary">
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>${TABELA}</arg>
</arguments>
<msg timestamp="20210117 18:17:45.821" level="INFO">Executing : Delete All Rows From Table  |  DELETE FROM account; </msg>
<status status="PASS" starttime="20210117 18:17:45.820" endtime="20210117 18:17:45.836"></status>
</kw>
<status status="PASS" starttime="20210117 18:17:45.818" endtime="20210117 18:17:45.836"></status>
</kw>
<status status="PASS" starttime="20210117 18:17:45.807" endtime="20210117 18:17:45.837"></status>
</kw>
<kw name="Executar script via STRING no Banco de Dados">
<arguments>
<arg>DROP table account</arg>
</arguments>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>sqlString=${SCRIPT}</arg>
</arguments>
<msg timestamp="20210117 18:17:45.839" level="INFO">Executing : Execute SQL String  |  DROP table account </msg>
<status status="PASS" starttime="20210117 18:17:45.839" endtime="20210117 18:17:46.036"></status>
</kw>
<status status="PASS" starttime="20210117 18:17:45.838" endtime="20210117 18:17:46.036"></status>
</kw>
<kw name="Desconectar do Banco de Dados" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20210117 18:17:46.039" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20210117 18:17:46.039" endtime="20210117 18:17:46.039"></status>
</kw>
<status status="PASS" starttime="20210117 18:17:46.038" endtime="20210117 18:17:46.039"></status>
</kw>
<status status="PASS" starttime="20210117 18:17:44.294" endtime="20210117 18:17:46.039" critical="yes"></status>
</test>
<doc>[14/10/2019] https://franz-see.github.io/Robotframework-Database-Library/api/1.2.2/DatabaseLibrary.html
Instale: "pip install -U robotframework-databaselibrary"
Para acessar o BD o Robot precisa conhecer o DRIVER de cada banco, então precisamos instalar esse DRIVER também (instale apenas para o BD que você utiliza!) ...
Para PostgreSQL: "pip install psycopg2"
Para SQLite 3: não precisa instalar nada!
Para MySQL: "pip install pymysql"
Para SQL Server: "pip install pymssql"
Para Oracle: "pip install cx-Oracle"</doc>
<status status="PASS" starttime="20210117 18:17:43.980" endtime="20210117 18:17:46.052"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Database">Database</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
